isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
identical(sapply(x, class), sapply(y, class))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
y <- data.frame(a1 = 4:6, b1 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
nrow(x)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
y <- data.frame(a1 = 4:6, b1 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
nrow(y)
`%+%` <- function(x, y) {
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
if (!(dataFrameCorrect(x) && dataFrameCorrect(y))) {
stop("%+%: Incompatible types for x and y")
}
if (identical(sapply(x, class), sapply(y, class))) {
return(rbind(x, y))
}
if (nrow(x) == nrow(y)) {
return(cbind(x, y))
}
stop("%+%: Incompatible types for x and y")
}
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
identical(dim(x %+% x), c(2L * nrow(x), ncol(x)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
y <- data.frame(a2 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% y), c(nrow(x), ncol(x) + ncol(y)))
identical(names(x %+% y), c(names(x), names(y)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% z), c(nrow(x), ncol(x) + ncol(z)))
identical(names(x %+% z), c("a1.x", "b1", "a1.y", "b2"))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
match(x,z)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
match(names(x), names(z))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
match(names(x), names(z), rm.na=TRUE)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches[!is.na(matches)]
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for i in matches {
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
print(i)
}
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x")
colnames(y)[i] <- paste(colnames(y)[i], ".y")
}
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x")
colnames(z)[i] <- paste(colnames(z)[i], ".y")
}
colnames
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x")
colnames(z)[i] <- paste(colnames(z)[i], ".y")
}
colnames(x)
colnames(y)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x", sep="")
colnames(z)[i] <- paste(colnames(z)[i], ".y", sep="")
}
colnames(x)
colnames(y)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x", sep="")
colnames(z)[i] <- paste(colnames(z)[i], ".y", sep="")
}
colnames(x)
colnames(y)
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
matches <- match(names(x), names(z))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x", sep="")
colnames(z)[i] <- paste(colnames(z)[i], ".y", sep="")
}
colnames(x)
colnames(z)
`%+%` <- function(x, y) {
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
if (!(dataFrameCorrect(x) && dataFrameCorrect(y))) {
stop("%+%: Incompatible types for x and y")
}
if (identical(sapply(x, class), sapply(y, class))) {
return(rbind(x, y))
}
if (nrow(x) == nrow(y)) {
matches <- match(names(x), names(y))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x", sep="")
colnames(y)[i] <- paste(colnames(y)[i], ".y", sep="")
}
return(cbind(x,y))
}
stop("%+%: Incompatible types for x and y")
}
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
identical(dim(x %+% x), c(2L * nrow(x), ncol(x)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
y <- data.frame(a2 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% y), c(nrow(x), ncol(x) + ncol(y)))
identical(names(x %+% y), c(names(x), names(y)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% z), c(nrow(x), ncol(x) + ncol(z)))
identical(names(x %+% z), c("a1.x", "b1", "a1.y", "b2"))
data.frame(a1 = 1:2) %+% data.frame(b1 = 1L)
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
unique(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
typeof(table(helloWorld))
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)[1]
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
tabel <- table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)[1,1]
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)[1]
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)[2]
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)[3]
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
table(helloWorld)
#helloFreq <- unique
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
helloFreq <- table(helloWorld)
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
helloFreq <- table(helloWorld)
helloLeafList <- lapply(helloFreq, makeLeaf)
##
## Make a leaf node (also a codeTree) with given symbol and given weight
##
makeLeaf <- function(symbol, weight)
list(list(symbol=symbol, weight=weight))
is.leaf <- function(object) is.null(object[[1]]$left) && is.null(object[[1]]$right)
## Accessors
symbol <- function(object) object[[1]]$symbol
weight <- function(object) object[[1]]$weight
##
## Construct a codeTree with given left and right code trees
##
makeCodeTree <- function(left, right)
list(list(left=left,
right=right,
symbol=c(symbol(left), symbol(right)),
weight=weight(left) + weight(right)))
## Left and right branch accessors
leftBranch <- function(tree) tree[[1]]$left
rightBranch <- function(tree) tree[[1]]$right
##
## Traverse the tree per bit
##
chooseBranch <- function(bit, branch) {
if (bit == 0)
leftBranch(branch)
else if (bit == 1)
rightBranch(branch)
else
stop(paste("bad bit in chooseBranch", bit))
}
helloLeafList <- lapply(helloFreq, makeLeaf)
names(helloFreq)
helloLeafList <- lapply(helloFreq, makeLeaf(helloFreq, names(helloFreq)))
helloLeafList <- lapply(helloFreq, makeLeaf, weight=names(helloFreq))
helloLeafList <- lapply(helloFreq, makeLeaf, weight=names(helloFreq))
helloLeafList
helloFreq
makeLeaf(names(helloFreq[1]), helloFreq[1])
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[1]
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[2]
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[3]
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[1]$
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[1]
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[1]$` `
makeLeaf(names(helloFreq[1]), helloFreq[1])
makeLeaf(names(helloFreq[2]), helloFreq[2])
makeLeaf(names(helloFreq[2]), helloFreq[2][1])
listPrimitiveFunctionsInBase <- function() {
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
prim <- Filter(is.primitive, funs)
return(prim)
}
listPrimitiveFunctionsInBase()
stop("%+%: Incompatible types for x and y")
`%+%` <- function(x, y) {
isCorrectType <- function(obj) {
return(obj %in% c("numeric", "integer", "character"))
}
dataFrameCorrect <- function(frame) {
all(sapply(sapply(frame, class), isCorrectType))
}
if (!(dataFrameCorrect(x) && dataFrameCorrect(y))) {
stop("%+%: Incompatible types for x and y")
}
if (identical(sapply(x, class), sapply(y, class))) {
return(rbind(x, y))
}
if (nrow(x) == nrow(y)) {
matches <- match(names(x), names(y))
matches <- matches[!is.na(matches)]
for (i in matches) {
colnames(x)[i] <- paste(colnames(x)[i], ".x", sep="")
colnames(y)[i] <- paste(colnames(y)[i], ".y", sep="")
}
return(cbind(x,y))
}
stop("%+%: Incompatible types for x and y")
}
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
identical(dim(x %+% x), c(2L * nrow(x), ncol(x)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
y <- data.frame(a2 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% y), c(nrow(x), ncol(x) + ncol(y)))
identical(names(x %+% y), c(names(x), names(y)))
x <- data.frame(a1 = 1:3, b1 = letters[1:3], stringsAsFactors = FALSE)
z <- data.frame(a1 = 4:6, b2 = letters[4:6], stringsAsFactors = FALSE)
identical(dim(x %+% z), c(nrow(x), ncol(x) + ncol(z)))
identical(names(x %+% z), c("a1.x", "b1", "a1.y", "b2"))
##
## Make a leaf node (also a codeTree) with given symbol and given weight
##
makeLeaf <- function(symbol, weight)
list(list(symbol=symbol, weight=weight))
is.leaf <- function(object) is.null(object[[1]]$left) && is.null(object[[1]]$right)
## Accessors
symbol <- function(object) object[[1]]$symbol
weight <- function(object) object[[1]]$weight
##
## Construct a codeTree with given left and right code trees
##
makeCodeTree <- function(left, right)
list(list(left=left,
right=right,
symbol=c(symbol(left), symbol(right)),
weight=weight(left) + weight(right)))
## Left and right branch accessors
leftBranch <- function(tree) tree[[1]]$left
rightBranch <- function(tree) tree[[1]]$right
##
## Traverse the tree per bit
##
chooseBranch <- function(bit, branch) {
if (bit == 0)
leftBranch(branch)
else if (bit == 1)
rightBranch(branch)
else
stop(paste("bad bit in chooseBranch", bit))
}
helloWorld <- c("H", "e", "l", "l", "o", " ",
"W", "o", "r", "l", "d", "!")
helloFreq <- table(helloWorld)
makeLeaf(names(helloFreq[2]), helloFreq[[2]])
helloLeafList <- lapply(helloFreq, function(x) {makeLeaf(names(x), x)} )
helloLeafList[2]
helloLeafList <- apply(helloFreq, function(x) {makeLeaf(names(x), x)} )
helloLeafList <- apply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList <- lapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[2]
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList[2]
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList
helloLeafList <- list(sapply(helloFreq, function(x) makeLeaf(names(x), x)))
helloLeafList
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x), x))
helloLeafList
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(x,x))
helloLeafList
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(colnames(x),x))
helloLeafList
makeLeaf(names(helloFreq[2])[1], helloFreq[[2]])
makeLeaf(names(helloFreq[2])[[1]], helloFreq[[2]])
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x)[[1]],x))
helloLeafList
helloLeafList <- sapply(helloFreq, function(x) makeLeaf(names(x)[1],x))
helloLeafList
for (freq in helloFreq) {
print(freq)
#helloLeafList <- freq
}
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
print(freq)
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i])
}
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
print(freq)
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloFreqList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
print(freq)
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloLeafList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloLeafList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloLeafList <- list(helloLeafList)
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloLeafList <- list(helloLeafList)
helloLeafList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
#helloLeafList <- list(helloLeafList)
helloLeafList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
helloLeafList
helloLeafList <- c()
for (i in 1:length(helloFreq)) {
helloLeafList <- c(helloLeafList, makeLeaf(names(helloFreq[i]), helloFreq[i]))
}
